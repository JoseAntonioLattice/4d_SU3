module starts

  use iso_fortran_env, only : dp => real64, i4 => int32
  use parameters, only : d
  implicit none

  private
  public :: cold_start, hot_start, cross

contains


  subroutine cold_start(U,d)
    use data_types_observables, only : link_variable
    type(link_variable), intent(out), dimension(:) :: U
    integer(i4), intent(in) :: d
    integer(i4) :: V,x,mu

    V = size(U)

    do x = 1, V
       do mu = 1, d
          U(x)%link(mu)%matrix = reshape([1.0_dp,0.0_dp,0.0_dp, 0.0_dp,1.0_dp,0.0_dp, 0.0_dp,0.0_dp,1.0_dp], [3,3])
       end do
    end do

  end subroutine cold_start

  subroutine hot_start(U,d)
    use data_types_observables, only : link_variable
    type(link_variable), intent(out), dimension(:) :: U
    integer(i4), intent(in) :: d
    integer(i4) :: V,x,mu
    real(dp), dimension(6) :: r1, r2
    complex(dp), dimension(3) :: uu, vv

    V = size(U)

    do x = 1, V
       do mu = 1, d
          call random_number(r1); call random_number(r2)
          r1 = r1 - 0.5_dp ; r2 = r2 - 0.5_dp;
          r1 = r1/norm2(r1); r2 = r2/norm2(r2)
          uu = [cmplx(r1(1),r1(2),dp), cmplx(r1(3),r1(4),dp), cmplx(r1(5), r1(6), dp)]
          vv = [cmplx(r2(1),r2(2),dp), cmplx(r2(3),r2(4),dp), cmplx(r2(5), r2(6), dp)]
          vv = vv - uu * dot_product(uu,vv)
          vv = vv / sqrt((vv(1)%re)**2 + (vv(1)%im)**2 + (vv(2)%re)**2 + (vv(2)%im)**2 +  (vv(3)%re)**2 + (vv(3)%im)**2)
          U(x) % link(mu) % matrix = transpose( reshape([uu,vv,cross(conjg(uu), conjg(vv))], [3,3]) )
       end do
    end do

  end subroutine hot_start

  function cross(u,v)
    complex(dp), dimension(3), intent(in) :: u, v
    complex(dp), dimension(3) :: cross

    cross(1) = u(2) * v(3) - u(3) * v(2) 
    cross(2) =-u(1) * v(3) + u(3) * v(1)
    cross(3) = u(1) * v(2) - u(2) * v(1)
  end function cross

  
end module starts
